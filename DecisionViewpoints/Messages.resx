<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="NotOriginateFromIdea" xml:space="preserve">
    <value>Relationships should not originate from idea decisions.</value>
  </data>
  <data name="NotPointToIdea" xml:space="preserve">
    <value>Relationships should not point to idea decisions.</value>
  </data>
  <data name="CausedByNotPointTo" xml:space="preserve">
    <value>Caused by-relationships should not point to discarded decisions.</value>
  </data>
  <data name="DependsOnOnlyPointTo" xml:space="preserve">
    <value>Depends on-relationships should only point to tentative, decided, approved or challenged decisions.</value>
  </data>
  <data name="ExcludedByNotPointTo" xml:space="preserve">
    <value>Excluded by-relationships should not point to idea, tentative, discarded or rejected decisions.</value>
  </data>
  <data name="ExcludedOnlyOriginateFrom" xml:space="preserve">
    <value>Excluded by-relationships should only originate from idea, tentative, discarded or rejected decisions.</value>
  </data>
  <data name="ReplacesOnlyPointTo" xml:space="preserve">
    <value>Replaces-relationships should only point to rejected decisions.</value>
  </data>
  <data name="AlternativeForNotPointTo" xml:space="preserve">
    <value>Alternative for-relationships should not point to discarded decisions.</value>
  </data>
  <data name="AlternativeForOnlyOriginateFrom" xml:space="preserve">
    <value>Alternative for-relationships should only originate from tentative or discarded decisions.</value>
  </data>
  <data name="NoLoops" xml:space="preserve">
    <value>A decision should not have a relation with itself.</value>
  </data>
  <data name="ConfirmCreateRelation" xml:space="preserve">
    <value>Do you still want to create this relationship?</value>
  </data>
  <data name="WarningCreateRelation" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="ModelValidationCategory" xml:space="preserve">
    <value>Decision Viewpoints</value>
  </data>
  <data name="ModelValidationConnectorMessage" xml:space="preserve">
    <value>{0} ({1} {3} {2})</value>
  </data>
  <data name="ModelValidationElementMessage" xml:space="preserve">
    <value>{0} (‹‹{1}›› {2})</value>
  </data>
  <data name="NameUniqueness" xml:space="preserve">
    <value>Every decision should have a unique name.</value>
  </data>
  <data name="MenuAddIn" xml:space="preserve">
    <value>-&amp;Decision Viewpoints</value>
  </data>
  <data name="MenuBaselineManually" xml:space="preserve">
    <value>Manually</value>
  </data>
  <data name="MenuBaselineOnClose" xml:space="preserve">
    <value>On File Close</value>
  </data>
  <data name="MenuBaselineOnModify" xml:space="preserve">
    <value>On Modification</value>
  </data>
  <data name="MenuBaselineOptions" xml:space="preserve">
    <value>-&amp;Baseline Options</value>
  </data>
  <data name="MenuCreateBaseline" xml:space="preserve">
    <value>Create Baseline</value>
  </data>
  <data name="MenuCreateProjectStructure" xml:space="preserve">
    <value>&amp;Create Project Structure</value>
  </data>
  <data name="MenuCreateTraces" xml:space="preserve">
    <value>-&amp;Create Trace</value>
  </data>
  <data name="MenuFollowTraceDefault" xml:space="preserve">
    <value>-&amp;Follow Trace(s)</value>
  </data>
  <data name="MenuFollowTraceNoTraces" xml:space="preserve">
    <value>No Traces defined</value>
  </data>
  <data name="MenuGenerateChronologicalVP" xml:space="preserve">
    <value>Generate Chronology View</value>
  </data>
  <data name="MenuTraceToExistingElement" xml:space="preserve">
    <value>Existing Element</value>
  </data>
  <data name="MenuTraceToNewDecision" xml:space="preserve">
    <value>&amp;New Decision</value>
  </data>
  <data name="MenuExport" xml:space="preserve">
    <value>-&amp;Export</value>
  </data>
  <data name="MenuExportExcelForces" xml:space="preserve">
    <value>Generate Excel (Selected Forces view)</value>
  </data>
  <data name="MenuExportExcelForcesAll" xml:space="preserve">
    <value>Generate Excel (All Forces views)</value>
  </data>
  <data name="MenuExportPowerPoint" xml:space="preserve">
    <value>Generate PowerPoint</value>
  </data>
  <data name="MenuExportSelectedDecisionsPowerPoint" xml:space="preserve">
    <value>Generate PowerPoint (Selected Decisions/Topics)</value>
  </data>
  <data name="MenuExportWord" xml:space="preserve">
    <value>Generate Word</value>
  </data>
  <data name="MenuExportSelectedDecisionsWord" xml:space="preserve">
    <value>Generate Word  (Selected Decisions/Topics)</value>
  </data>
  <data name="SuccesfulForcesReportCreation" xml:space="preserve">
    <value>Forces report was created successfully.</value>
  </data>
  <data name="SuccesfulReportCreation" xml:space="preserve">
    <value>Report was created successfully.</value>
  </data>
  <data name="ReportSuccessful" xml:space="preserve">
    <value>{0} report successfully exported.</value>
  </data>
  <data name="SaveReportAs" xml:space="preserve">
    <value>Save report as...</value>
  </data>
  <data name="MenuTraceToNewTopic" xml:space="preserve">
    <value>&amp;New Topic</value>
  </data>
  <data name="ErrorNoNameForDecision" xml:space="preserve">
    <value>Please supply a name for the decision.</value>
  </data>
  <data name="ErrorSelectDecisionViewPackage" xml:space="preserve">
    <value>Please select a decicion view package.</value>
  </data>
  <data name="NameSuggestionDecision" xml:space="preserve">
    <value>{0} Decision</value>
  </data>
  <data name="NameSuggestionTopic" xml:space="preserve">
    <value>{0} Topic</value>
  </data>
  <data name="DialogOpenLatestDecision" xml:space="preserve">
    <value>This is only a copy of the orginal decision. No modifications will be stored in this element. Do you want to open the original version of the decision instead?</value>
  </data>
  <data name="DialogOpenLatestDecisionTitle" xml:space="preserve">
    <value>Open latest version of the decision</value>
  </data>
  <data name="ForcesViewConfigureButton" xml:space="preserve">
    <value>Configure</value>
  </data>
  <data name="ForcesViewOpenDecisionInDiagrams" xml:space="preserve">
    <value>Open Decision in Diagram(s)</value>
  </data>
  <data name="ForcesViewOpenDecisionInDetailView" xml:space="preserve">
    <value>Open Decision Detail View</value>
  </data>
  <data name="ForcesViewRemoveDecision" xml:space="preserve">
    <value>Remove Decision</value>
  </data>
  <data name="ChronologyDecisionName" xml:space="preserve">
    <value>{0}
[{1}]</value>
  </data>
  <data name="ReportingStakeholderInvolvmentLine" xml:space="preserve">
    <value>‹‹{0}›› {1}: {2}</value>
  </data>
  <data name="ForcesViewRemoveForce" xml:space="preserve">
    <value>Remove Force</value>
  </data>
  <data name="ForcesViewRemoveAllDecisions" xml:space="preserve">
    <value>Remove all decisions</value>
  </data>
  <data name="ForcesViewRemoveAllForces" xml:space="preserve">
    <value>Remove all forces</value>
  </data>
  <data name="ForcesViewDecisionExists" xml:space="preserve">
    <value>The Decision named "{0}" already exists.</value>
  </data>
  <data name="ForcesViewForceExists" xml:space="preserve">
    <value>The Force named "{0}" already exists with the Concern named "{1}".</value>
  </data>
</root>